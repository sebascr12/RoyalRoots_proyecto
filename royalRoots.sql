 --TABLESPACE
-- CREATE TABLESPACE FIDE_ROYALROOTS_TBS
--datafile 'C:\APP\SPINA\PRODUCT\21C\ORADATA\XE\FIDE_ROYALROOTS_TBS.DBF' size 100M;

--pasar a la pluggable
GRANT SET CONTAINER TO ROYALROOTS;

-- CREAR PERFIL
CREATE PROFILE FIDE_ROYAL_ROOTS_PROF
LIMIT
SESSIONS_PER_USER 3
FAILED_LOGIN_ATTEMPTS 5
PASSWORD_LOCK_TIME 40
IDLE_TIME 60;

--USER A PROFILE
ALTER USER royalRoots PROFILE FIDE_ROYAL_ROOTS_PROF;
ALTER USER royalRoots ACCOUNT UNLOCK;

--VEN PERFILES
SELECT PROFILE, RESOURCE_NAME, LIMIT
FROM DBA_PROFILES;
--VER USUARIOS
SELECT USERNAME, ACCOUNT_STATUS, DEFAULT_TABLESPACE, PROFILE
FROM DBA_USERS;
--PASAR USUARIO A TBS
ALTER USER ROYALROOTS
DEFAULT TABLESPACE FIDE_ROYALROOTS_TBS;
--VERIFICAR
SELECT USERNAME, DEFAULT_TABLESPACE
FROM DBA_USERS
WHERE USERNAME = 'ROYALROOTS';
--VERIFICAR POR AQUELLO
SELECT FILE_NAME, TABLESPACE_NAME
FROM DBA_DATA_FILES
WHERE TABLESPACE_NAME = 'FIDE_ROYALROOTS_TBS';

--SI ESTOY EN XEBD1
SHOW CON_NAME;




--TABLA ESTADO
CREATE TABLE FIDE_ESTADO_TB (
    ID_ESTADO NUMBER CONSTRAINT FIDE_ESTADO_TB_PK PRIMARY KEY NOT NULL,
    DESCRIPCION VARCHAR2(100),
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50)
)TABLESPACE FIDE_ROYALROOTS_TBS;

--DIRECCION
CREATE TABLE FIDE_PROVINCIA_TB (
    ID_PROVINCIA NUMBER CONSTRAINT FIDE_PROVINCIA_TB_ID_PROVINCIA_PK PRIMARY KEY NOT NULL,
    PROVINCIA VARCHAR2(100) NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_PROVINCIA_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_CANTON_TB (
    ID_CANTON NUMBER CONSTRAINT FIDE_CANTON_TB_ID_CANTON_PK PRIMARY KEY NOT NULL,
    CANTON VARCHAR2(100) NOT NULL,
    ID_PROVINCIA NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_CANTON_TB_ID_PROVINCIA_FK FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB (ID_PROVINCIA),
    CONSTRAINT FIDE_CANTON_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_DISTRITO_TB (
    ID_DISTRITO NUMBER CONSTRAINT FIDE_DISTRITO_TB_ID_DISTRITO_PK PRIMARY KEY NOT NULL,
    DISTRITO VARCHAR2(100) NOT NULL,
    ID_CANTON NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_DISTRITO_TB_ID_CANTON_FK FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB (ID_CANTON),
    CONSTRAINT FIDE_DISTRITO_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_DIRECCION_TB (
    ID_DIRECCION NUMBER CONSTRAINT FIDE_DIRECCION_TB_ID_DIRECCION_PK PRIMARY KEY NOT NULL,
    ID_PROVINCIA NUMBER NOT NULL,
    ID_CANTON NUMBER NOT NULL,
    ID_DISTRITO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_DIRECCION_TB_ID_PROVINCIA_FK FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB (ID_PROVINCIA),
    CONSTRAINT FIDE_DIRECCION_TB_ID_CANTON_FK FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB (ID_CANTON),
    CONSTRAINT FIDE_DIRECCION_TB_ID_DISTRITO_FK FOREIGN KEY (ID_DISTRITO) REFERENCES FIDE_DISTRITO_TB (ID_DISTRITO),
    CONSTRAINT FIDE_DIRECCION_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;


--EMPLEADOS
CREATE TABLE FIDE_TURNOS_TB (
    ID_TURNO NUMBER CONSTRAINT FIDE_TURNOS_TB_ID_TURNO_PK PRIMARY KEY NOT NULL,
    HORA_INICIO DATE NOT NULL,
    HORA_FIN DATE NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_TURNOS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_EMPLEADOS_FUNCION_TB (
    ID_FUNCION NUMBER CONSTRAINT FIDE_EMPLEADOS_FUNCION_TB_ID_FUNCION_PK PRIMARY KEY NOT NULL,
    NOMBRE_FUNCION VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(100) NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_EMPLEADOS_FUNCION_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_EMPLEADOS_TB (
    ID_EMPLEADO NUMBER CONSTRAINT FIDE_EMPLEADOS_TB_ID_EMPLEADO_PK PRIMARY KEY NOT NULL,
    NOMBRE_EMPLEADO VARCHAR2(100) NOT NULL,
    APELLIDO_EMPLEADO VARCHAR2(100) NOT NULL,
    ADMIN_CORREO VARCHAR2(100) NOT NULL,
    TELEFONO VARCHAR2(100) NOT NULL,
    FECHA_CONTRATACION DATE NOT NULL,
    SALARIO NUMBER NOT NULL,
    ID_TURNO NUMBER NOT NULL,
    ID_FUNCION NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_EMPLEADOS_TB_ID_TURNO_FK FOREIGN KEY (ID_TURNO) REFERENCES FIDE_TURNOS_TB (ID_TURNO),
    CONSTRAINT FIDE_EMPLEADOS_TB_ID_FUNCION_FK FOREIGN KEY (ID_FUNCION) REFERENCES FIDE_EMPLEADOS_FUNCION_TB (ID_FUNCION),
    CONSTRAINT FIDE_EMPLEADOS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_VACACIONES_TB (
    ID_VACACION NUMBER NOT NULL,
    FECHA DATE NOT NULL,
    ID_EMPLEADO NUMBER NOT NULL,
    ID_FUNCION NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_VACACIONES_TB_PK PRIMARY KEY (ID_EMPLEADO, FECHA),
    CONSTRAINT FIDE_VACACIONES_TB_ID_EMPLEADO_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES FIDE_EMPLEADOS_TB (ID_EMPLEADO),
    CONSTRAINT FIDE_VACACIONES_TB_ID_FUNCION_FK FOREIGN KEY (ID_FUNCION) REFERENCES FIDE_EMPLEADOS_FUNCION_TB (ID_FUNCION),
    CONSTRAINT FIDE_VACACIONES_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

--CLIENTES
CREATE TABLE FIDE_SERVICIOS_TB (
    ID_SERVICIO NUMBER CONSTRAINT FIDE_SERVICIOS_TB_ID_SERVICIO_PK PRIMARY KEY NOT NULL,
    NOMBRE_SERVICIO VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(100) NOT NULL,
    PRECIO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_SERVICIOS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_BENEFICIO_TB (
    ID_BENEFICIO NUMBER CONSTRAINT FIDE_BENEFICIO_TB_ID_BENEFICIO_PK PRIMARY KEY NOT NULL,
    DETALLE_BENEFICIO VARCHAR2(100) NOT NULL,
    ID_SERVICIO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_BENEFICIO_TB_ID_SERVICIO_FK FOREIGN KEY (ID_SERVICIO) REFERENCES FIDE_SERVICIOS_TB (ID_SERVICIO),
    CONSTRAINT FIDE_BENEFICIO_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;


CREATE TABLE FIDE_CLIENTES_FRECUENTES_TB (
    TARJETA_CLIENTE NUMBER NOT NULL,
    ID_BENEFICIO NUMBER NOT NULL,
    ID_CLIENTE NUMBER NOT NULL,
    ID_EMPLEADO NUMBER NOT NULL,
    ID_PAGO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_PK PRIMARY KEY (TARJETA_CLIENTE, ID_CLIENTE),
    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_ID_BENEFICIO_FK FOREIGN KEY (ID_BENEFICIO) REFERENCES FIDE_BENEFICIO_TB (ID_BENEFICIO),
    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_ID_CLIENTE_FK FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB (ID_CLIENTE),
    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_ID_EMPLEADO_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES FIDE_EMPLEADOS_TB (ID_EMPLEADO),
    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_ID_PAGO_FK FOREIGN KEY (ID_PAGO) REFERENCES FIDE_HISTORIAL_PAGOS_TB (ID_PAGO),
    CONSTRAINT FIDE_CLIENTES_FRECUENTES_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;


CREATE TABLE FIDE_CLIENTES_TB (
    ID_CLIENTE NUMBER CONSTRAINT FIDE_CLIENTES_TB_ID_CLIENTE_PK PRIMARY KEY NOT NULL,
    NOMBRE_CLIENTE VARCHAR2(100) NOT NULL,
    TELEFONO_CLIENTE VARCHAR2(100) NOT NULL,
    CORREO_CLIENTE VARCHAR2(200) NOT NULL,
    FECHA_REGISTRO DATE NOT NULL,
    ID_DIRECCION NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_CLIENTES_TB_ID_DIRECCION_FK FOREIGN KEY (ID_DIRECCION) REFERENCES FIDE_DIRECCION_TB (ID_DIRECCION),
    CONSTRAINT FIDE_CLIENTES_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

--RESERVAS
CREATE TABLE FIDE_RESERVAS_TB (
    ID_RESERVA NUMBER NOT NULL,
    ID_CLIENTE NUMBER NOT NULL,
    ID_EMPLEADO NUMBER NOT NULL,
    ID_SERVICIO NUMBER NOT NULL,
    FECHA_HORA DATE NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_RESERVAS_TB_PK PRIMARY KEY (ID_CLIENTE, FECHA_HORA),
    CONSTRAINT FIDE_RESERVAS_TB_ID_CLIENTE_FK FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB (ID_CLIENTE),
    CONSTRAINT FIDE_RESERVAS_TB_ID_EMPLEADO_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES FIDE_EMPLEADOS_TB (ID_EMPLEADO),
    CONSTRAINT FIDE_RESERVAS_TB_ID_SERVICIO_FK FOREIGN KEY (ID_SERVICIO) REFERENCES FIDE_SERVICIOS_TB (ID_SERVICIO),
    CONSTRAINT FIDE_RESERVAS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

--FACTURACION 
CREATE TABLE FIDE_METODO_PAGO_TB (
    ID_METODO_PAGO NUMBER CONSTRAINT FIDE_METODO_PAGO_TB_ID_METODO_PAGO_PK PRIMARY KEY NOT NULL,
    NOMBRE_METODO VARCHAR2(100) NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_METODO_PAGO_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;


CREATE TABLE FIDE_HISTORIAL_PAGOS_TB (
    ID_PAGO NUMBER CONSTRAINT FIDE_HISTORIAL_PAGOS_TB_ID_PAGO_PK PRIMARY KEY NOT NULL,
    ID_CLIENTE NUMBER NOT NULL,
    MONTO NUMBER NOT NULL,
    FECHA_PAGO DATE NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_HISTORIAL_PAGOS_TB_ID_CLIENTE_FK FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB (ID_CLIENTE),
    CONSTRAINT FIDE_HISTORIAL_PAGOS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_FACTURAS_TB (
    ID_FACTURA NUMBER CONSTRAINT FIDE_FACTURAS_TB_ID_FACTURA_PK PRIMARY KEY NOT NULL,
    ID_CLIENTE NUMBER NOT NULL,
    FECHA_EMISION DATE NOT NULL,
    TOTAL NUMBER NOT NULL,
    ID_METODO_PAGO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_FACTURAS_TB_ID_CLIENTE_FK FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB (ID_CLIENTE),
    CONSTRAINT FIDE_FACTURAS_TB_ID_METODO_PAGO_FK FOREIGN KEY (ID_METODO_PAGO) REFERENCES FIDE_METODO_PAGO_TB (ID_METODO_PAGO),
    CONSTRAINT FIDE_FACTURAS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_DETALLE_FACTURAS_TB (
    ID_DETALLE NUMBER CONSTRAINT FIDE_DETALLE_FACTURAS_TB_ID_DETALLE_PK PRIMARY KEY NOT NULL,
    ID_FACTURA NUMBER NOT NULL,
    ID_PRODUCTO NUMBER NOT NULL,
    SUBTOTAL NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_DETALLE_FACTURAS_TB_ID_FACTURA_FK FOREIGN KEY (ID_FACTURA) REFERENCES FIDE_FACTURAS_TB (ID_FACTURA),
    CONSTRAINT FIDE_DETALLE_FACTURAS_TB_ID_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB (ID_PRODUCTO),
    CONSTRAINT FIDE_DETALLE_FACTURAS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;

--USUARIOS
CREATE TABLE FIDE_ROL_TB (
    ID_ROL NUMBER CONSTRAINT ID_ROL_PK PRIMARY KEY,
    NOMBRE_ROL VARCHAR2(100),
    ID_ESTADO NUMBER,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_ROL_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
)TABLESPACE FIDE_ROYALROOTS_TBS;


CREATE TABLE FIDE_USUARIOS_TB (
    ID_USUARIO NUMBER CONSTRAINT FIDE_USUARIOS_TB_ID_USUARIOS_PK PRIMARY KEY,
    USUARIO VARCHAR2(100),
    CLAVE VARCHAR2(100),
    ID_ROL  NUMBER,
    ID_ESTADO NUMBER,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_USUARIOS_TB_ROL_ID_FK FOREIGN KEY (ID_ROL) REFERENCES FIDE_ROL_TB (ID_ROL),
    CONSTRAINT FIDE_USUARIOS_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

--PRODUCTOS
CREATE TABLE FIDE_PRODUCTO_TB (
    ID_PRODUCTO NUMBER CONSTRAINT FIDE_PRODUCTO_TB_ID_PRODUCTO_PK PRIMARY KEY NOT NULL,
    NOMBRE_PRODUCTO VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(100) NOT NULL,
    PRECIO_UNITARIO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_PRODUCTO_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_INVENTARIO_TB (
    ID_INVENTARIO NUMBER CONSTRAINT FIDE_INVENTARIO_TB_ID_INVENTARIO_PK PRIMARY KEY NOT NULL,
    CANTIDAD NUMBER NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL,
    ID_PRODUCTO NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_INVENTARIO_TB_ID_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB (ID_PRODUCTO),
    CONSTRAINT FIDE_INVENTARIO_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_PROVEEDOR_TB (
    ID_PROVEEDOR NUMBER CONSTRAINT FIDE_PROVEEDOR_TB_ID_PROVEEDOR_PK PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(100) NOT NULL,
    CONTACTO VARCHAR2(100) NOT NULL,
    TIPO VARCHAR2(100) NOT NULL,
    ID_DIRECCION NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_PROVEEDOR_TB_ID_DIRECCION_FK FOREIGN KEY (ID_DIRECCION) REFERENCES FIDE_DIRECCION_TB (ID_DIRECCION),
    CONSTRAINT FIDE_PROVEEDOR_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;

CREATE TABLE FIDE_ORDENES_COMPRA_TB (
    ID_ORDEN NUMBER CONSTRAINT FIDE_PROVEEDOR_TB_ID_ORDEN_PK PRIMARY KEY NOT NULL,
    ID_PROVEEDOR NUMBER NOT NULL,
    FECHA_ORDEN DATE NOT NULL,
    TOTAL NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    LAST_UPDATED_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    ACCION VARCHAR2(50),

    CONSTRAINT FIDE_ORDENES_COMPRA_TB_ID_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR) REFERENCES FIDE_PROVEEDOR_TB (ID_PROVEEDOR),
    CONSTRAINT FIDE_ORDENES_COMPRA_TB_ID_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB (ID_ESTADO)
    )TABLESPACE FIDE_ROYALROOTS_TBS;
    
    
    
    
    
    
    
    
        
--TRIGGERS Y SECUENCIAS POR MODULO Y TABLA 
--ESTADO
CREATE SEQUENCE FIDE_ESTADO_TB_SEQ START WITH 1 INCREMENT BY 1;
--FUNCION
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_ESTADO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_ESTADO_TB_GENERAR_ID_FN;
/
-- TRIGGER:
CREATE OR REPLACE TRIGGER FIDE_ESTADO_TB_TRG
BEFORE INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := FIDE_ESTADO_TB_GENERAR_ID_FN();
END;
/
--ATRIBUTOS DE AUDITORIA
CREATE OR REPLACE TRIGGER FIDE_ESTADO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

-- UPDATE
CREATE OR REPLACE TRIGGER FIDE_ESTADO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

--ACCION
CREATE OR REPLACE TRIGGER FIDE_ESTADO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--MODULO DIRECCION

--PROVINCIA_TB
CREATE SEQUENCE FIDE_PROVINCIA_TB_SEQ START WITH 1 INCREMENT BY 1;
--FUNCION
CREATE OR REPLACE FUNCTION FIDE_PROVINCIA_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_PROVINCIA_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_PROVINCIA_TB_GENERAR_ID_FN;
/
--TIGGER
CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_TB_TRG
BEFORE INSERT ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  :NEW.ID_PROVINCIA := FIDE_PROVINCIA_TB_GENERAR_ID_FN();
END;
/
--ATRIBUTOS DE AUDITORIA
--INSERTAR
CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/
--UPDATE
CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/


-- CANTÓN_TB

CREATE SEQUENCE FIDE_CANTON_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_CANTON_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_CANTON_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_CANTON_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_CANTON_TB_TRG
BEFORE INSERT ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  :NEW.ID_CANTON := FIDE_CANTON_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_CANTON_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CANTON_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CANTON_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

-- DISTRITO

CREATE SEQUENCE FIDE_DISTRITO_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_DISTRITO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_DISTRITO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_DISTRITO_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_TB_TRG
BEFORE INSERT ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_DISTRITO := FIDE_DISTRITO_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

-- DIRECCIÓN

CREATE SEQUENCE FIDE_DIRECCION_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_DIRECCION_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_DIRECCION_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_DIRECCION_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
  :NEW.ID_DIRECCION := FIDE_DIRECCION_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--EMPLEADOS
-- TURNOS

CREATE SEQUENCE FIDE_TURNOS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_TURNOS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_TURNOS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_TURNOS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_TURNOS_TB_TRG
BEFORE INSERT ON FIDE_TURNOS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_TURNO := FIDE_TURNOS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_TURNOS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_TURNOS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_TURNOS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_TURNOS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_TURNOS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TURNOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

-- FUNCIONES DE EMPLEADOS

CREATE SEQUENCE FIDE_EMPLEADOS_FUNCION_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_EMPLEADOS_FUNCION_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_EMPLEADOS_FUNCION_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_EMPLEADOS_FUNCION_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_FUNCION_TB_TRG
BEFORE INSERT ON FIDE_EMPLEADOS_FUNCION_TB
FOR EACH ROW
BEGIN
  :NEW.ID_FUNCION := FIDE_EMPLEADOS_FUNCION_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_FUNCION_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_EMPLEADOS_FUNCION_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_FUNCION_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_EMPLEADOS_FUNCION_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_FUNCION_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_EMPLEADOS_FUNCION_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/


-- EMPLEADOS

CREATE SEQUENCE FIDE_EMPLEADOS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_EMPLEADOS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_EMPLEADOS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_EMPLEADOS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_TB_TRG
BEFORE INSERT ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_EMPLEADO := FIDE_EMPLEADOS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_EMPLEADOS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

-- VACACIONES PK COMPUESTA: ID_EMPLEADO + FECHA

CREATE SEQUENCE FIDE_VACACIONES_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_VACACIONES_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_VACACIONES_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_VACACIONES_TB_GENERAR_ID_FN;
/
-- AUNQUE HAYA PK COMPUESTA SE VA A GENERAL ID_VACACION 

CREATE OR REPLACE TRIGGER FIDE_VACACIONES_TB_TRG
BEFORE INSERT ON FIDE_VACACIONES_TB
FOR EACH ROW
BEGIN
  :NEW.ID_VACACION := FIDE_VACACIONES_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_VACACIONES_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_VACACIONES_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_VACACIONES_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_VACACIONES_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_VACACIONES_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_VACACIONES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--CLIENTES
-- SERVICIOS
CREATE SEQUENCE FIDE_SERVICIOS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_SERVICIOS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_SERVICIOS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_SERVICIOS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_SERVICIOS_TB_TRG
BEFORE INSERT ON FIDE_SERVICIOS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_SERVICIO := FIDE_SERVICIOS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_SERVICIOS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_SERVICIOS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_SERVICIOS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_SERVICIOS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_SERVICIOS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_SERVICIOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- BENEFICIOS
CREATE SEQUENCE FIDE_BENEFICIO_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_BENEFICIO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_BENEFICIO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_BENEFICIO_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_BENEFICIO_TB_TRG
BEFORE INSERT ON FIDE_BENEFICIO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_BENEFICIO := FIDE_BENEFICIO_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_BENEFICIO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_BENEFICIO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_BENEFICIO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_BENEFICIO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_BENEFICIO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_BENEFICIO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- CLIENTES

CREATE SEQUENCE FIDE_CLIENTES_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_CLIENTES_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_CLIENTES_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_CLIENTES_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_TB_TRG
BEFORE INSERT ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  :NEW.ID_CLIENTE := FIDE_CLIENTES_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- CLIENTES FRECUENTES (PK compuesta)

CREATE SEQUENCE FIDE_CLIENTES_FRECUENTES_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_CLIENTES_FRECUENTES_TB_GENERAR_TARJETA_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_CLIENTES_FRECUENTES_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_CLIENTES_FRECUENTES_TB_GENERAR_TARJETA_FN;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_FRECUENTES_TB_TRG
BEFORE INSERT ON FIDE_CLIENTES_FRECUENTES_TB
FOR EACH ROW
BEGIN
  :NEW.TARJETA_CLIENTE := FIDE_CLIENTES_FRECUENTES_TB_GENERAR_TARJETA_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_FRECUENTES_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_CLIENTES_FRECUENTES_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_FRECUENTES_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_CLIENTES_FRECUENTES_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_CLIENTES_FRECUENTES_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTES_FRECUENTES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--RESERVAS
-- FIDE_RESERVAS_TB
CREATE SEQUENCE FIDE_RESERVAS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_RESERVAS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_RESERVAS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_RESERVAS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_RESERVAS_TB_TRG
BEFORE INSERT ON FIDE_RESERVAS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_RESERVA := FIDE_RESERVAS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_RESERVAS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_RESERVAS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_RESERVAS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_RESERVAS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_RESERVAS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_RESERVAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--FACTURACION
-- FIDE_METODO_PAGO_TB
CREATE SEQUENCE FIDE_METODO_PAGO_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_METODO_PAGO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_METODO_PAGO_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_TB_TRG
BEFORE INSERT ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_METODO_PAGO := FIDE_METODO_PAGO_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_HISTORIAL_PAGOS_TB
CREATE SEQUENCE FIDE_HISTORIAL_PAGOS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_HISTORIAL_PAGOS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_HISTORIAL_PAGOS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_HISTORIAL_PAGOS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_HISTORIAL_PAGOS_TB_TRG
BEFORE INSERT ON FIDE_HISTORIAL_PAGOS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_PAGO := FIDE_HISTORIAL_PAGOS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_HISTORIAL_PAGOS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_HISTORIAL_PAGOS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_HISTORIAL_PAGOS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_HISTORIAL_PAGOS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_HISTORIAL_PAGOS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_HISTORIAL_PAGOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_FACTURAS_TB (ALFANUMERICO)
CREATE SEQUENCE FIDE_FACTURAS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_FACTURAS_TB_GENERAR_ID_FN
RETURN VARCHAR2 IS
  V_LETRA CHAR(1);
  V_SEQUENCE VARCHAR2(100);
BEGIN
  V_LETRA := CHR(65 + TRUNC(DBMS_RANDOM.VALUE(0, 26)));
  V_SEQUENCE := TO_CHAR(SYSDATE, 'DD-MM-YYYY') || '-' || FIDE_FACTURAS_TB_SEQ.NEXTVAL || V_LETRA;
  RETURN V_SEQUENCE;
END FIDE_FACTURAS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_FACTURAS_TB_TRG
BEFORE INSERT ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_FACTURA := FIDE_FACTURAS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_FACTURAS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_FACTURAS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_FACTURAS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_DETALLE_FACTURAS_TB
CREATE SEQUENCE FIDE_DETALLE_FACTURAS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_DETALLE_FACTURAS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_DETALLE_FACTURAS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_DETALLE_FACTURAS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURAS_TB_TRG
BEFORE INSERT ON FIDE_DETALLE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_DETALLE := FIDE_DETALLE_FACTURAS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURAS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_DETALLE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURAS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_DETALLE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURAS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLE_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
--USUARIOS
-- FIDE_ROL_TB
CREATE SEQUENCE FIDE_ROL_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_ROL_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_ROL_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_ROL_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_ROL_TB_TRG
BEFORE INSERT ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
  :NEW.ID_ROL := FIDE_ROL_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_ROL_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_ROL_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_ROL_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_USUARIOS_TB
CREATE SEQUENCE FIDE_USUARIOS_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_USUARIOS_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_USUARIOS_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_USUARIOS_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_USUARIOS_TB_TRG
BEFORE INSERT ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
  :NEW.ID_USUARIO := FIDE_USUARIOS_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_USUARIOS_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_USUARIOS_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_USUARIOS_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

--PRODUCTOS, INVENTARIO Y PROVEEDORES
-- FIDE_PRODUCTO_TB
CREATE SEQUENCE FIDE_PRODUCTO_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_PRODUCTO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_PRODUCTO_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_TB_TRG
BEFORE INSERT ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_PRODUCTO := FIDE_PRODUCTO_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_INVENTARIO_TB
CREATE SEQUENCE FIDE_INVENTARIO_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_INVENTARIO_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_INVENTARIO_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_TB_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  :NEW.ID_INVENTARIO := FIDE_INVENTARIO_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/
-- FIDE_PROVEEDOR_TB


CREATE SEQUENCE FIDE_PROVEEDOR_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_PROVEEDOR_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_PROVEEDOR_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_PROVEEDOR_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_PROVEEDOR_TB_TRG
BEFORE INSERT ON FIDE_PROVEEDOR_TB
FOR EACH ROW
BEGIN
  :NEW.ID_PROVEEDOR := FIDE_PROVEEDOR_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_PROVEEDOR_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_PROVEEDOR_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_PROVEEDOR_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_PROVEEDOR_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_PROVEEDOR_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVEEDOR_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/

-- FIDE_ORDENES_COMPRA_TB
CREATE SEQUENCE FIDE_ORDENES_COMPRA_TB_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION FIDE_ORDENES_COMPRA_TB_GENERAR_ID_FN
RETURN NUMBER IS
  V_ID NUMBER;
BEGIN
  SELECT FIDE_ORDENES_COMPRA_TB_SEQ.NEXTVAL INTO V_ID FROM DUAL;
  RETURN V_ID;
END FIDE_ORDENES_COMPRA_TB_GENERAR_ID_FN;
/

CREATE OR REPLACE TRIGGER FIDE_ORDENES_COMPRA_TB_TRG
BEFORE INSERT ON FIDE_ORDENES_COMPRA_TB
FOR EACH ROW
BEGIN
  :NEW.ID_ORDEN := FIDE_ORDENES_COMPRA_TB_GENERAR_ID_FN();
END;
/

CREATE OR REPLACE TRIGGER FIDE_ORDENES_COMPRA_TB_AUDIT_INSERTAR_TRG
BEFORE INSERT ON FIDE_ORDENES_COMPRA_TB
FOR EACH ROW
BEGIN
  :NEW.CREATED_BY := USER;
  :NEW.CREATION_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_ORDENES_COMPRA_TB_AUDIT_UPDATE_TRG
BEFORE UPDATE ON FIDE_ORDENES_COMPRA_TB
FOR EACH ROW
BEGIN
  :NEW.LAST_UPDATED_BY := USER;
  :NEW.LAST_UPDATE_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER FIDE_ORDENES_COMPRA_TB_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ORDENES_COMPRA_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSIF UPDATING THEN
    :NEW.ACCION := 'UPDATE';
  END IF;
END;
/





--AUDITORIA
SHOW PARAMETER AUDIT_TRAIL;

---VER LOS REGISTROS DE AUDITORIA
SELECT
    USERNAME,
    ACTION_NAME,
    OBJ_NAME,
    EXTENDED_TIMESTAMP
FROM DBA_AUDIT_TRAIL
WHERE OBJ_NAME = 'FIDE_ESTADO_TB';

--ESTADO
AUDIT INSERT, UPDATE, DELETE
ON FIDE_ESTADO_TB
BY ACCESS;

--DIRECCION
AUDIT INSERT, UPDATE, DELETE
ON FIDE_PROVINCIA_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_CANTON_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_DISTRITO_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_DIRECCION_TB
BY ACCESS;

-- EMPLEADOS
AUDIT INSERT, UPDATE, DELETE
ON FIDE_TURNOS_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_EMPLEADOS_FUNCION_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_EMPLEADOS_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_VACACIONES_TB
BY ACCESS;

--CLIENTES
AUDIT INSERT, UPDATE, DELETE
ON FIDE_SERVICIOS_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_BENEFICIO_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_CLIENTES_FRECUENTES_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_CLIENTES_TB
BY ACCESS;

--RESERVAS
AUDIT INSERT, UPDATE, DELETE
ON FIDE_RESERVAS_TB
BY ACCESS;

--FACTURACIÓN
AUDIT INSERT, UPDATE, DELETE
ON FIDE_METODO_PAGO_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_HISTORIAL_PAGOS_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_FACTURAS_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_DETALLE_FACTURAS_TB
BY ACCESS;

--USUARIOS
AUDIT INSERT, UPDATE, DELETE
ON FIDE_ROL_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_USUARIOS_TB
BY ACCESS;

--PRODUCTOS
AUDIT INSERT, UPDATE, DELETE
ON FIDE_PRODUCTO_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_INVENTARIO_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_PROVEEDOR_TB
BY ACCESS;

AUDIT INSERT, UPDATE, DELETE
ON FIDE_ORDENES_COMPRA_TB
BY ACCESS;





